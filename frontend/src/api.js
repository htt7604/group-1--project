// // src/services/api.js
// import axios from "axios";

// const API_URL = "http://localhost:3000"; // ‚öôÔ∏è Backend server URL

// // üß© L·∫•y danh s√°ch ng∆∞·ªùi d√πng
// export async function getUsers() {
//   const res = await axios.get(`${API_URL}/users`);
//   return res.data;
// }

// // üß© Th√™m ng∆∞·ªùi d√πng m·ªõi
// export async function addUser(user) {
//   const res = await axios.post(`${API_URL}/users`, user);
//   return res.data;
// }

// // üß© X√≥a ng∆∞·ªùi d√πng theo ID
// export async function deleteUser(id) {
//   const res = await axios.delete(`${API_URL}/users/${id}`);
//   return res.data;
// }

// import axios from 'axios';

// // 1. T·∫°o m·ªôt instance axios v·ªõi c·∫•u h√¨nh c∆° b·∫£n
// const api = axios.create({
//     baseURL: 'http://localhost:3000/api', // URL g·ªëc cho t·∫•t c·∫£ API backend
//     headers: {
//         'Content-Type': 'application/json',
//     },
// });

// // 2. Interceptor cho Request: T·ª± ƒë·ªông ƒë√≠nh k√®m Access Token v√†o header
// api.interceptors.request.use(
//     (config) => {
//         const token = localStorage.getItem('accessToken');
//         if (token) {
//             config.headers['x-auth-token'] = token; // G·∫Øn token v√†o header 'x-auth-token'
//         }
//         return config;
//     },
//     (error) => {
//         return Promise.reject(error);
//     }
// );

// // 3. Interceptor cho Response: X·ª≠ l√Ω khi Access Token h·∫øt h·∫°n (l·ªói 401)
// api.interceptors.response.use(
//     (response) => {
//         // N·∫øu response th√†nh c√¥ng, tr·∫£ v·ªÅ response ƒë√≥
//         return response;
//     },
//     async (error) => {
//         const originalRequest = error.config;

//         // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói 401 (Unauthorized) v√† ch∆∞a th·ª≠ l·∫°i request n√†y ch∆∞a
//         if (error.response?.status === 401 && !originalRequest._retry) {
//             originalRequest._retry = true; // ƒê√°nh d·∫•u l√† ƒë√£ th·ª≠ l·∫°i

//             try {
//                 // L·∫•y Refresh Token t·ª´ localStorage
//                 const refreshToken = localStorage.getItem('refreshToken');
//                 if (!refreshToken) {
//                     // N·∫øu kh√¥ng c√≥ refresh token, chuy·ªÉn h∆∞·ªõng v·ªÅ login
//                     console.error("Kh√¥ng t√¨m th·∫•y Refresh Token, ƒëang chuy·ªÉn h∆∞·ªõng v·ªÅ login...");
//                     // N√™n c√≥ logic logout ·ªü ƒë√¢y n·∫øu d√πng Redux/Context
//                     localStorage.removeItem('accessToken');
//                     localStorage.removeItem('userRole');
//                     window.location.href = '/login';
//                     return Promise.reject(error);
//                 }

//                 // G·ªçi API /auth/refresh ƒë·ªÉ l·∫•y Access Token m·ªõi
//                 const response = await axios.post('http://localhost:3000/api/auth/refresh', { refreshToken });
//                 const { accessToken: newAccessToken } = response.data;

//                 // L∆∞u Access Token m·ªõi v√†o localStorage
//                 localStorage.setItem('accessToken', newAccessToken);

//                 // C·∫≠p nh·∫≠t header c·ªßa request g·ªëc v·ªõi token m·ªõi
//                 originalRequest.headers['x-auth-token'] = newAccessToken;

//                 // Th·ª±c hi·ªán l·∫°i request g·ªëc ƒë√£ b·ªã l·ªói 401
//                 return api(originalRequest);

//             } catch (refreshError) {
//                 // N·∫øu g·ªçi API refresh c≈©ng th·∫•t b·∫°i (v√≠ d·ª•: Refresh Token h·∫øt h·∫°n)
//                 console.error("L·ªói khi refresh token:", refreshError);
//                 // X√≥a token c≈© v√† chuy·ªÉn h∆∞·ªõng v·ªÅ login
//                 localStorage.removeItem('accessToken');
// localStorage.removeItem('refreshToken');
//                 localStorage.removeItem('userRole');
//                 window.location.href = '/login';
//                 return Promise.reject(refreshError);
//             }
//         }

//         // N·∫øu kh√¥ng ph·∫£i l·ªói 401 ho·∫∑c ƒë√£ th·ª≠ l·∫°i r·ªìi, tr·∫£ v·ªÅ l·ªói ban ƒë·∫ßu
//         return Promise.reject(error);
//     }
// );

import axios from 'axios';

const api = axios.create({
    baseURL: 'http://localhost:3000/api',
});

// Interceptor cho Request: T·ª± ƒë·ªông ƒë√≠nh k√®m Access Token
api.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('accessToken');
        if (token) {
            // ‚úÖ S·ª¨A L·∫†I ·ªû ƒê√ÇY: G·ª≠i token theo chu·∫©n "Bearer"
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        return config;
    },
    (error) => Promise.reject(error)
);

// Interceptor cho Response: T·ª± ƒë·ªông l√†m m·ªõi token khi h·∫øt h·∫°n
api.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config;
        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;
            try {
                const refreshToken = localStorage.getItem('refreshToken');
                if (!refreshToken) {
                    localStorage.clear();
                    window.location.href = '/login';
                    return Promise.reject(error);
                }
                const res = await axios.post('http://localhost:3000/api/auth/refresh', { refreshToken });
                const { accessToken: newAccessToken } = res.data;
                localStorage.setItem('accessToken', newAccessToken);
                // Th·ª≠ l·∫°i request g·ªëc v·ªõi token m·ªõi
                return api(originalRequest);
            } catch (refreshError) {
                console.error("Refresh token kh√¥ng h·ª£p l·ªá:", refreshError);
                localStorage.clear();
                window.location.href = '/login';
                return Promise.reject(refreshError);
            }
        }
        return Promise.reject(error);
    }
);

export default api;